name: KernelSU Build (ACE5)
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8650'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'pineapple'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android14'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.1'
      BUILD_METHOD:
        description: "编译方式"
        required: true
        default: 'gki'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 延长超时时间

    steps:
      # ========== 资源优化阶段 ==========
      - name: Configure Swap (128GB)
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 131072     # 128GB Swap
          root-reserve-mb: 512      # 最小保留内存
          temp-reserve-mb: 512
          swap-file: /dev/sdb       # 使用独立磁盘分区（如果可用）
          remove-dotnet: 'true'
          remove-android: 'true'

      - name: Setup cgroups
        run: |
          # 创建资源限制组
          sudo cgcreate -g cpu,memory:/kernel_build
          sudo cgset -r cpu.shares=512 kernel_build          # CPU权重限制
          sudo cgset -r memory.limit_in_bytes=6G kernel_build # 物理内存硬限制
          sudo cgset -r memory.memsw.limit_in_bytes=64G kernel_build # 总内存限制

      # ========== 构建环境准备 ==========
      - name: Prepare Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang lld llvm \
            python3 git curl \
            bc bison flex libssl-dev

          # 配置LLVM工具链
          echo "export CLANG_PATH=/usr/lib/llvm-14/bin" >> $GITHUB_ENV
          echo "export PATH=$CLANG_PATH:$PATH" >> $GITHUB_ENV

      # ========== 分阶段构建 ==========
      - name: Stage 1 - Init Build
        run: |
          set -ex
          # 在cgroup限制下运行
          sudo cgexec -g cpu,memory:kernel_build \
            make defconfig prepare modules_prepare -j2

        env:
          LLVM: 1
          CC: clang
          LD: ld.lld

      - name: Stage 2 - Core Compile
        run: |
          set -ex
          # 添加心跳日志
          while sleep 60; do
            echo "[$(date)] Compiling in progress..."
            free -h
          done &
          HEARTBEAT_PID=$!

          # 核心编译
          sudo cgexec -g cpu,memory:kernel_build \
            make -j2 2>&1 | ts '[%Y-%m-%d %H:%M:%S]'

          kill $HEARTBEAT_PID

        env:
          LLVM: 1
          CC: clang
          LD: ld.lld

      # ========== 产物处理 ==========
      - name: Package Artifacts
        run: |
          # 动态查找产物路径
          IMAGE_PATH=$(find . -name "Image" | head -n1)
          if [ -z "$IMAGE_PATH" ]; then
            echo "##[error] Kernel image not found!"
            exit 1
          fi

          # 创建AnyKernel3包
          git clone https://github.com/tiann/AnyKernel3
          cp $IMAGE_PATH AnyKernel3/
          zip -r kernel_package.zip AnyKernel3/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel_package
          path: kernel_package.zip

      # ========== 资源回收 ==========
      - name: Cleanup cgroups
        if: always()
        run: |
          sudo cgdelete cpu,memory:kernel_build
